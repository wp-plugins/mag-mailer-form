<?php
/*
Plugin Name: Mag mailer form
Plugin URI: http://www.magissim.com/
Description: Contact form plugin.
Author: Magissim
Author URI: http://www.magissim.com/
Text Domain: mag-mailer
Domain Path: /languages/
Version: 1.0.0
*/

define('MMURL', WP_PLUGIN_URL."/".dirname( plugin_basename( __FILE__ ) ) );
define('MMPATH', WP_PLUGIN_DIR."/".dirname( plugin_basename( __FILE__ ) ) );


/* register post type*/
function magmailer_custom_post_type() {
	$labels = array(
		'name'                => _x( 'Mag mailer form', 'Post Type General Name', 'text_domain' ),
		'singular_name'       => _x( 'Mag mailer form', 'Post Type Singular Name', 'text_domain' ),
		'menu_name'           => __( 'Mag mailer form', 'text_domain' ),
		'name_admin_bar'      => __( 'Mag mailer form', 'text_domain' ),
		'parent_item_colon'   => __( 'Parent Item:', 'text_domain' ),
		'all_items'           => __( 'All Items', 'text_domain' ),
		'add_new_item'        => __( 'Add New Item', 'text_domain' ),
		'add_new'             => __( 'Add New', 'text_domain' ),
		'new_item'            => __( 'New Item', 'text_domain' ),
		'edit_item'           => __( 'Edit Item', 'text_domain' ),
		'update_item'         => __( 'Update Item', 'text_domain' ),
		'not_found'           => __( 'Not found', 'text_domain' ),
		'not_found_in_trash'  => __( 'Not found in Trash', 'text_domain' ),
	);
	$args = array(
		'label'               => __( 'mag-mailer-form', 'text_domain' ),
		'description'         => __( 'Post Type Description', 'text_domain' ),
		'labels'              => $labels,
		'supports'            => array( 'title'),
		'hierarchical'        => false,
		'public'              => false,
		'show_ui'             => true,
		'show_in_menu'        => true,
		'menu_position'       => 5,
		'show_in_admin_bar'   => true,
		'show_in_nav_menus'   => true,
		'can_export'          => true,
		'has_archive'         => true,		
		'exclude_from_search' => true,
		'publicly_queryable'  => true,
		'capability_type'     => 'page',
                'rewrite' => false
	);
	register_post_type( 'mag-mailer-form', $args );
}
add_action( 'init', 'magmailer_custom_post_type', 0 );

/* Remove unnecesary column and options*/
add_filter( 'post_row_actions', 'remove_row_actions', 10, 2 );
function remove_row_actions( $actions, $post )
{
  global $current_screen;
	if( $current_screen->post_type != 'mag-mailer-form' ) return $actions;
	unset( $actions['view'] );
	unset( $actions['inline hide-if-no-js'] );

	return $actions;
}

function hide_publishing_actions(){
        $my_post_type = 'mag-mailer-form';
        global $post;
        if($post->post_type == $my_post_type){
            echo '
                <style type="text/css">
                    #misc-publishing-actions,
                    #minor-publishing-actions{
                        display:none;
                    }
                </style>
            ';
        }
}
add_action('admin_head-post.php', 'hide_publishing_actions');
add_action('admin_head-post-new.php', 'hide_publishing_actions');


/**
 * Generated by the WordPress Meta Box generator
 * at http://jeremyhixon.com/wp-tools/meta-box/
 */

function form_template_get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}

function form_template_add_meta_box() {
	add_meta_box(
		'form_template-form-template',
		__( 'Form template', 'form_template' ),
		'form_template_form_template_html',
		'mag-mailer-form',
		'normal',
		'high'
	);
}
add_action( 'add_meta_boxes', 'form_template_add_meta_box' );

function form_template_form_template_html( $post) {
	wp_nonce_field( '_form_template_form_template_nonce', 'form_template_form_template_nonce' ); ?>

        <?php
            $form_id = email_settings_get_meta( 'email_settings_email_settings_classname' );
            if(!email_settings_get_meta( 'email_settings_email_settings_classname' )){
               $form_id = 'mag-mailer-'.$post->ID;
            }
            $customTemplate = 'custom-template-active';
            if(!email_settings_get_meta( 'form_template_form_template_i_want_to_use_my_own_template' )){
               $customTemplate = '';
            } 
        ?>

            <p style="margin: 0;">
                <label class="strong" for="email_settings_email_settings_shortcode"><?php _e( 'Shortcode', 'email_settings' ); ?></label><br>
                    <input style="background-color: #5EBD83; color: #fff;" type="text" name="email_settings_email_settings_shortcode" id="email_settings_email_settings_shortcode" value="[mag_mailer_form id='<?=$post->ID?>']" readonly>
                    <small><?php _e( 'Copy this shortcode and paste where you want to display this form.', 'email_settings' ); ?></small>
            </p>
            
            <p><strong>Or</strong></p>
            
            <p>
                <input class="check-custom-template" type="checkbox" name="form_template_form_template_i_want_to_use_my_own_template" id="form_template_form_template_i_want_to_use_my_own_template" value="i-want-to-use-my-own-template" <?php echo ( form_template_get_meta( 'form_template_form_template_i_want_to_use_my_own_template' ) === 'i-want-to-use-my-own-template' ) ? 'checked' : ''; ?>>
                <label for="form_template_form_template_i_want_to_use_my_own_template"><?php _e( 'I want to use my own HTML', 'form_template' ); ?></label>	
            </p>
            <div class="custom-template <?=$customTemplate?>">
                <p style="margin: 0;">
                    <label for="email_settings_email_settings_classname"><?php _e( 'ID selector', 'email_settings' ); ?></label><br>
                    <input type="text" name="email_settings_email_settings_classname" id="email_settings_email_settings_classname" value="<?php echo $form_id; ?>" readonly>
                    <small><?php _e( 'Add this ID selector to your &lt;form&gt; tag.', 'email_settings' ); ?></small>
                </p>
            </div>
	
     <?php
}

function form_template_form_template_save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['form_template_form_template_nonce'] ) || ! wp_verify_nonce( $_POST['form_template_form_template_nonce'], '_form_template_form_template_nonce' ) ) return;
	if ( ! current_user_can( 'edit_post' ) ) return;

	if ( isset( $_POST['form_template_form_template_i_want_to_use_my_own_template'] ) )
		update_post_meta( $post_id, 'form_template_form_template_i_want_to_use_my_own_template', esc_attr( $_POST['form_template_form_template_i_want_to_use_my_own_template'] ) );
	else
		update_post_meta( $post_id, 'form_template_form_template_i_want_to_use_my_own_template', null );
}
add_action( 'save_post', 'form_template_form_template_save' );



/*  Form settings */
function form_settings_get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}

function form_settings_add_meta_box() {
	add_meta_box(
		'form_settings-form-settings',
		__( 'Form settings', 'form_settings' ),
		'form_settings_form_settings_html',
		'mag-mailer-form',
		'normal',
		'high'
	);
}
add_action( 'add_meta_boxes', 'form_settings_add_meta_box' );

function form_settings_form_settings_html( $post) {
	wp_nonce_field( '_form_settings_form_settings_nonce', 'form_settings_form_settings_nonce' ); ?>
        
        <?php
            $customTemplate = 'custom-template-active';
            if(!email_settings_get_meta( 'form_template_form_template_i_want_to_use_my_own_template' )){
               $customTemplate = '';
            } 
        ?>
        <div class="form-fields <?=$customTemplate?>">
            <div class="default-fields-list">
                <p>Select the fields that appear in the form:</p>
                <p>
                    <input class="set-default-field" type="checkbox" name="form_settings_form_settings_name" id="form_settings_form_settings_name" value="name" <?php echo ( form_settings_get_meta( 'form_settings_form_settings_name' ) === 'name' ) ? 'checked' : ''; ?>>
                    <label for="form_settings_form_settings_name"><?php _e( 'Name', 'form_settings' ); ?></label>
                </p>	
                <p>
                    <input class="set-default-field" type="checkbox" name="form_settings_form_settings_last_name" id="form_settings_form_settings_last_name" value="last-name" <?php echo ( form_settings_get_meta( 'form_settings_form_settings_last_name' ) === 'last-name' ) ? 'checked' : ''; ?>>
                    <label for="form_settings_form_settings_last_name"><?php _e( 'Last name', 'form_settings' ); ?></label>	
                </p>	
                <p>
                    <input class="set-default-field" type="checkbox" name="form_settings_form_settings_phone_number" id="form_settings_form_settings_phone_number" value="phone-number" <?php echo ( form_settings_get_meta( 'form_settings_form_settings_phone_number' ) === 'phone-number' ) ? 'checked' : ''; ?>>
                    <label for="form_settings_form_settings_phone_number"><?php _e( 'Phone number', 'form_settings' ); ?></label>
                </p>	
                <p>
                    <input class="set-default-field" type="checkbox" name="form_settings_form_settings_email" id="form_settings_form_settings_email" value="email" <?php echo ( form_settings_get_meta( 'form_settings_form_settings_email' ) === 'email' ) ? 'checked' : ''; ?>>
                    <label for="form_settings_form_settings_email"><?php _e( 'Email', 'form_settings' ); ?></label>	
                </p>	
                <p>
                    <input class="set-default-field" type="checkbox" name="form_settings_form_settings_subject" id="form_settings_form_settings_subject" value="subject" <?php echo ( form_settings_get_meta( 'form_settings_form_settings_subject' ) === 'subject' ) ? 'checked' : ''; ?>>
                    <label for="form_settings_form_settings_subject"><?php _e( 'Subject', 'form_settings' ); ?></label>
                </p>	
                <p>
                    <input class="set-default-field" type="checkbox" name="form_settings_form_settings_message" id="form_settings_form_settings_message" value="message" <?php echo ( form_settings_get_meta( 'form_settings_form_settings_message' ) === 'message' ) ? 'checked' : ''; ?>>
                    <label for="form_settings_form_settings_message"><?php _e( 'Message', 'form_settings' ); ?></label>	
                </p>
            </div>
            <div class="custom-form-fields-list">
                <p>
                    <label for="form_settings_form_settings_name_attributes"><?php _e( 'Put the name attribute of the input fields separated by commas:', 'form_settings' ); ?></label><br>	
                    <input class="fullWidth" type="text" name="form_settings_form_settings_name_attributes" id="form_settings_form_settings_name_attributes" value="<?php echo form_settings_get_meta( 'form_settings_form_settings_name_attributes' ); ?>">
                </p>
                <div id="duplicateNameFields">
                        <?php echo _e('The followings name attributes are duplicated:', 'form_settings'); ?>
                        <span id="nameFields"></span>
                </div>
                <div id="fieldsSaved"><?php echo _e('Fields saved', 'form_settings'); ?></div>
                <p class="saveNameFields"> 
                    <button id="saveNameFields" class="button button-primary button-large">Save values</button>
                </p>
                <hr>
                <small>Note: To use default fields uncheck the option "I want to use my own HTML".</small>
            </div>
            <input id="post_id" type="hidden" value="<?=get_the_ID()?>">
        </div>
    <?php
}

function form_settings_form_settings_save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['form_settings_form_settings_nonce'] ) || ! wp_verify_nonce( $_POST['form_settings_form_settings_nonce'], '_form_settings_form_settings_nonce' ) ) return;
	if ( ! current_user_can( 'edit_post' ) ) return;

	if ( isset( $_POST['form_settings_form_settings_name'] ) )
		update_post_meta( $post_id, 'form_settings_form_settings_name', esc_attr( $_POST['form_settings_form_settings_name'] ) );
	else
		update_post_meta( $post_id, 'form_settings_form_settings_name', null );
	if ( isset( $_POST['form_settings_form_settings_last_name'] ) )
		update_post_meta( $post_id, 'form_settings_form_settings_last_name', esc_attr( $_POST['form_settings_form_settings_last_name'] ) );
	else
		update_post_meta( $post_id, 'form_settings_form_settings_last_name', null );
	if ( isset( $_POST['form_settings_form_settings_phone_number'] ) )
		update_post_meta( $post_id, 'form_settings_form_settings_phone_number', esc_attr( $_POST['form_settings_form_settings_phone_number'] ) );
	else
		update_post_meta( $post_id, 'form_settings_form_settings_phone_number', null );
	if ( isset( $_POST['form_settings_form_settings_email'] ) )
		update_post_meta( $post_id, 'form_settings_form_settings_email', esc_attr( $_POST['form_settings_form_settings_email'] ) );
	else
		update_post_meta( $post_id, 'form_settings_form_settings_email', null );
	if ( isset( $_POST['form_settings_form_settings_subject'] ) )
		update_post_meta( $post_id, 'form_settings_form_settings_subject', esc_attr( $_POST['form_settings_form_settings_subject'] ) );
	else
		update_post_meta( $post_id, 'form_settings_form_settings_subject', null );
	if ( isset( $_POST['form_settings_form_settings_message'] ) )
		update_post_meta( $post_id, 'form_settings_form_settings_message', esc_attr( $_POST['form_settings_form_settings_message'] ) );
	else
		update_post_meta( $post_id, 'form_settings_form_settings_message', null );

        
}
add_action( 'save_post', 'form_settings_form_settings_save' );

/**
 * Adds a box to the main column on the Post and Page edit screens.
 */
function email_settings_get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}
function email_settings_add_meta_box() {
	add_meta_box(
		'email_settings-email-settings',
		__( 'Email settings', 'email_settings' ),
		'email_settings_email_settings_html',
		'mag-mailer-form',
		'normal',
		'low'
	);
}
add_action( 'add_meta_boxes', 'email_settings_add_meta_box' );

function email_settings_email_settings_html( $post) {
	wp_nonce_field( '_email_settings_email_settings_nonce', 'email_settings_email_settings_nonce' ); ?>

        <p>
            <small>You can use these short tags in the fields below:</small>
        </p>
        <?php if(!form_settings_get_meta('form_template_form_template_i_want_to_use_my_own_template')){ ?>
            <div class="short-tags default">
                <?php if(form_settings_get_meta('form_settings_form_settings_name') != '') { ?>
                       <span id="<?=form_settings_get_meta('form_settings_form_settings_name')?>" class="email-body-fields">%<?=form_settings_get_meta('form_settings_form_settings_name')?>%</span>
                <?php } ?>
                           <?php if(form_settings_get_meta('form_settings_form_settings_last_name') != '') { ?>
                       <span id="<?=form_settings_get_meta('form_settings_form_settings_last_name')?>" class="email-body-fields">%<?=form_settings_get_meta('form_settings_form_settings_last_name')?>%</span>
                <?php } ?>
                           <?php if(form_settings_get_meta('form_settings_form_settings_phone_number') != '') { ?>
                    <span id="<?=form_settings_get_meta('form_settings_form_settings_phone_number')?>" class="email-body-fields">%<?=form_settings_get_meta('form_settings_form_settings_phone_number')?>%</span>
                <?php } ?>
                        <?php if(form_settings_get_meta('form_settings_form_settings_email') != ''){ ?>
                        <span id="<?=form_settings_get_meta('form_settings_form_settings_email')?>" class="email-body-fields">%<?=form_settings_get_meta('form_settings_form_settings_email')?>%</span>
                <?php } ?>
                <?php if(form_settings_get_meta('form_settings_form_settings_subject') != '') { ?>
                    <span id="<?=form_settings_get_meta('form_settings_form_settings_subject')?>" class="email-body-fields">%<?=form_settings_get_meta('form_settings_form_settings_subject')?>%</span>
                <?php } ?>
                        <?php if(form_settings_get_meta('form_settings_form_settings_message') != '') { ?>
                    <span id="<?=form_settings_get_meta('form_settings_form_settings_message')?>" class="email-body-fields">%<?=form_settings_get_meta('form_settings_form_settings_message')?>%</span>
                <?php } ?>
            </div>
            
        <?php }
        else { ?>
            <div class="short-tags custom"></div>
        <?php }?>
        <?php
            $from = email_settings_get_meta('email_settings_email_settings_from');
            if(!form_settings_get_meta( 'email_settings_email_settings_from' )){
               $from = '%name% <%email%>';
            }
        ?>    
	<p>
            <label class="strong" for="email_settings_email_settings_to"><?php _e( 'To', 'email_settings' ); ?></label><br>
            <input class="inputClass" type="text" name="email_settings_email_settings_to" id="email_settings_email_settings_to" value="<?php echo email_settings_get_meta( 'email_settings_email_settings_to' ); ?>">
	</p>
        <!--<p>
            <label class="strong" for="email_settings_email_settings_from"><?php _e( 'From', 'email_settings' ); ?></label><br>
            <input class="inputClass" type="text" name="email_settings_email_settings_from" id="email_settings_email_settings_from" value="<?php echo $from; ?>">
	</p>-->
        <p>
            <label class="strong" for="email_settings_email_settings_subject"><?php _e( 'Subject', 'email_settings' ); ?></label><br>
            <input class="inputClass" type="text" name="email_settings_email_settings_subject" id="email_settings_email_settings_subject" value="<?php echo email_settings_get_meta( 'email_settings_email_settings_subject' ); ?>">
	</p>   
        
        <p>
            <label class="strong" for="email_settings_email_settings_email_body"><?php _e( 'Email body', 'email_settings' ); ?></label><br>
            <textarea class="textareaClass" name="email_settings_email_settings_email_body" id="email_settings_email_settings_email_body"><?php echo email_settings_get_meta( 'email_settings_email_settings_email_body' ); ?></textarea>
	</p>
        <div id="span-default-field">
            <span id="" class="email-body-fields"></span>
        </div>
            <?php
}

function email_settings_email_settings_save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['email_settings_email_settings_nonce'] ) || ! wp_verify_nonce( $_POST['email_settings_email_settings_nonce'], '_email_settings_email_settings_nonce' ) ) return;
	if ( ! current_user_can( 'edit_post' ) ) return;

	if ( isset( $_POST['email_settings_email_settings_to'] ) )
		update_post_meta( $post_id, 'email_settings_email_settings_to', esc_attr( $_POST['email_settings_email_settings_to'] ) );
        if ( isset( $_POST['email_settings_email_settings_from'] ) )
		update_post_meta( $post_id, 'email_settings_email_settings_from', esc_attr( $_POST['email_settings_email_settings_from'] ) );
	if ( isset( $_POST['email_settings_email_settings_subject'] ) )
		update_post_meta( $post_id, 'email_settings_email_settings_subject', esc_attr( $_POST['email_settings_email_settings_subject'] ) );
        if ( isset( $_POST['email_settings_email_settings_email_body'] ) )
		update_post_meta( $post_id, 'email_settings_email_settings_email_body', esc_attr( $_POST['email_settings_email_settings_email_body'] ) );
}
add_action( 'save_post', 'email_settings_email_settings_save' );


/*  Form settings */
function html_form_code($id) {
	?>
        
    <form id="mag-mailer-<?=$id?>" action="<?=esc_url( $_SERVER['REQUEST_URI'] )?>" enctype="multipart/form-data">
		<?php if(get_post_meta( $id, 'form_settings_form_settings_name', true ) != ''){ ?>
			<p>Name (required) <br />
				<input id="name" type="text" name="name" pattern="[a-zA-Z0-9 ]+" value="<?=( isset( $_POST["name"] ) ? esc_attr( $_POST["name"] ) : '' )?>" size="40" />
			</p>
        <?php } ?>
		
		<?php if(get_post_meta( $id, 'form_settings_form_settings_last_name', true ) != ''){ ?>
			<p>Last name (required) <br />
				<input id="last-name" type="text" name="last-name" pattern="[a-zA-Z0-9 ]+" value="<?=( isset( $_POST["last-name"] ) ? esc_attr( $_POST["last-name"] ) : '' )?>" size="40" />
			</p>
        <?php } ?>
		
		<?php if(get_post_meta( $id, 'form_settings_form_settings_phone_number', true ) != ''){ ?>
			<p>Phone number<br />
				<input id="phone-number" type="text" name="phone-number" pattern="[0-9 ]+" value="<?=( isset( $_POST["phone-number"] ) ? esc_attr( $_POST["phone-number"] ) : '' )?>" size="40" />
			</p>
        <?php } ?>
		
		<?php if(get_post_meta( $id, 'form_settings_form_settings_email', true ) != ''){ ?>
			<p>Email (required) <br />
				<input id="email" type="email" name="email" value="<?=( isset( $_POST["email"] ) ? esc_attr( $_POST["email"] ) : '' )?>" size="40" />
			</p>
        <?php } ?>
		
		<?php if(get_post_meta( $id, 'form_settings_form_settings_subject', true ) != ''){ ?>
			<p>Subject (required) <br />
				<input id="subject" type="text" name="subject" value="<?=( isset( $_POST["subject"] ) ? esc_attr( $_POST["subject"] ) : '' )?>" size="40" />
			</p>
        <?php } ?>
		
		<?php if(get_post_meta( $id, 'form_settings_form_settings_message', true ) != ''){ ?>
			<p>Message (required) <br />
				<textarea id="message" rows="10" cols="35" name="message"><?=( isset( $_POST["message"] ) ? esc_attr( $_POST["message"] ) : '' )?></textarea>
			</p>
        <?php } ?>

	<p><input type="submit" name="mmf-submitted" value="Send"/></p>
                
    </form>
	<?php
}


/* shortcode */
function mag_mailer_shortcode($atts, $content = null) {
    extract(shortcode_atts(array('id' => ''), $atts));
    ob_start();
    html_form_code($id);
    return ob_get_clean();
}
add_shortcode('mag_mailer_form', 'mag_mailer_shortcode');

/***********************************/
/********** admin scripts **********/
/***********************************/

function mmf_admin_styles() {
    
    global $pagenow, $typenow;
    if (empty($typenow) && !empty($_GET['post'])) {
      $post = get_post($_GET['post']);
      $typenow = $post->post_type;
    }
    if (is_admin() && $pagenow=='post-new.php' OR $pagenow=='post.php' && $typenow=='mag-mailer-form') {
        wp_enqueue_style( 'prefix-style', plugins_url('styles.css', __FILE__) );
    }
}
add_action( 'admin_enqueue_scripts', 'mmf_admin_styles' );

function mmf_admin_scripts()
{
    global $pagenow, $typenow;
    if (empty($typenow) && !empty($_GET['post'])) {
      $post = get_post($_GET['post']);
      $typenow = $post->post_type;
    }
    if (is_admin() && $pagenow=='post-new.php' OR $pagenow=='post.php' && $typenow=='mag-mailer-form') {    
      wp_register_script( 'mmf-admin-scripts', plugins_url( '/js/admin-scripts.js', __FILE__ ) );
      wp_enqueue_script( 'mmf-admin-scripts' );
      
    }
}
add_action( 'admin_enqueue_scripts', 'mmf_admin_scripts' );

/***********************************/
/********** admin scripts **********/
/***********************************/

/* custom messages */
function set_messages($messages) {
    
    global $post, $post_ID;
    $post_type = get_post_type( $post_ID );

    $obj = get_post_type_object($post_type);
    $singular = $obj->labels->singular_name;

    $messages[$post_type] = array(
        0 => '', // Unused. Messages start at index 1.
        1 => sprintf( __($singular.' updated.'), esc_url( get_permalink($post_ID) ) ),
        2 => __('Custom field updated.'),
        3 => __('Custom field deleted.'),
        4 => __($singular.' updated.'),
        5 => isset($_GET['revision']) ? sprintf( __($singular.' restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,
        6 => sprintf( __($singular.' published.'), esc_url( get_permalink($post_ID) ) ),
        7 => __('Page saved.'),
        8 => sprintf( __($singular.' submitted. <a target="_blank" href="%s">Preview '.strtolower($singular).'</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
        9 => sprintf( __($singular.' scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview '.strtolower($singular).'</a>'), date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),
        10 => sprintf( __($singular.' draft updated. <a target="_blank" href="%s">Preview '.strtolower($singular).'</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
    );
    return $messages;
}

add_filter('post_updated_messages', 'set_messages' );


function mag_mailer_enqueuescripts(){
    wp_enqueue_script('mag_mailer', MMURL.'/magmailer.js', array('jquery'));
    wp_localize_script( 'mag_mailer', 'mag_mailerajax', array( 'ajaxurl' => admin_url( 'admin-ajax.php' ) ) );
}
add_action('wp_enqueue_scripts', mag_mailer_enqueuescripts);


/* get empty fields */
function fieldEmpty($field) {
    return empty($field);
}

function mag_mailer_send_mail(){

    if ( isset( $_POST['action'] ) ) {
            
        $error          = 0;
        $results        = array();
        $emptyResults   = '';
        $form_id        = $_POST["mmf-id"];
        
        unset($_POST['action'], $_POST['mmf-id']);
        
        $customHtml = get_post_meta($form_id, 'form_template_form_template_i_want_to_use_my_own_template', true);

        $emptyResults = array_keys(array_filter($_POST, 'fieldEmpty'));
        if(!empty($emptyResults)){
            $error = 1;
            $results[] = "There are empty fields.";
        }

        $emailBody  = get_post_meta($form_id, 'email_settings_email_settings_email_body', true);
        $from       = get_post_meta($form_id, 'email_settings_email_settings_from', true);
        $subject    = get_post_meta($form_id, 'email_settings_email_settings_subject', true);
        
        foreach ($_POST as $key => $value) {
           // $value = filter_var($value, FILTER_SANITIZE_STRING);
            $emailBody = str_replace('%'.array_search ($value, $_POST).'%', $value, $emailBody);

            if('%'.array_search ($value, $_POST).'%'  == $subject){
                $subject = $value;
            }
            $from     = str_replace('%'.array_search ($value, $_POST).'%', $value, $from);
        }
        
        $message      = file_get_contents(MMPATH.'/contents.html');
        $message      = str_replace('%email_body%', nl2br($emailBody), $message);
        $message      = str_replace('%sitename%', get_bloginfo().'<br>'.site_url(), $message);

        if($error == 0){
            
            add_filter( 'wp_mail_content_type', 'set_html_content_type' );
            function set_html_content_type() { return 'text/html'; }
            
            $to         = get_post_meta($form_id, 'email_settings_email_settings_to', true);
            $headers    = 'From: '. $from . "\r\n";

            // Change default WP email sender
            add_filter('wp_mail_from', '_mail_from');
            add_filter('wp_mail_from_name', '_mail_from_name');

            function _mail_from($from) {
                return get_option('admin_email');
            }
            function _mail_from_name($from_name) {
                return get_option('blogname');
            }
            
            if(wp_mail( $to, $subject, $message)){
                $results[] = "Thanks for you mail.";
            }
            else{
                $results[] = "The mail could not be sent.";
            }
            
            remove_filter( 'wp_mail_content_type', 'set_html_content_type' );
            
        }
        
        echo json_encode(array(
                'state'     => $error, 
                'messages'  => $results,
                'errors'    => $emptyResults
        ));
        
        exit();
    }
}


// creating Ajax call for WordPress

add_action( 'wp_ajax_nopriv_mag_mailer_send_mail', 'mag_mailer_send_mail' );
add_action( 'wp_ajax_mag_mailer_send_mail', 'mag_mailer_send_mail' );


/* save names fields into DB */
add_action( 'wp_ajax_nopriv_save_names_fields', 'save_names_fields' );
add_action( 'wp_ajax_save_names_fields', 'save_names_fields' );

function save_names_fields() {
      
        $post_id = $_POST['post_id'];
        if ( isset( $_POST['form_settings_form_settings_name_attributes'] ) ){
            update_post_meta( $post_id, 'form_settings_form_settings_name_attributes', esc_attr( $_POST['form_settings_form_settings_name_attributes'] ) );
            echo get_post_meta($post_id, 'form_settings_form_settings_name_attributes', true ); 
        }
	else{
            update_post_meta( $post_id, 'form_settings_form_settings_name_attributes', null );
        }
        
        die();
}
